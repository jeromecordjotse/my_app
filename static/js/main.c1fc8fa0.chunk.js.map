{"version":3,"sources":["redux/counter/counterReducers.js","redux/counter/counterType.js","redux/store.js","components/navbar.jsx","components/counter.jsx","components/counters.jsx","components/main.jsx","redux/counter/counterActions.js","App.js","serviceWorker.js","index.js"],"names":["initialState","counters","id","value","counterReducer","state","action","index","indexOf","payload","type","newDeletedCounters","filter","c","console","log","newResetCounters","map","newId","newAddedCounters","concat","store","createStore","NavBar","totalCounters","className","href","Counter","styles","fontSize","fontWeight","this","props","children","getBadgeClasses","formatCount","onClick","onIncrement","counter","onReset","onDelete","classes","Component","Counters","onAdd","onResetAll","key","connect","dispatch","increaseCounter","deleteCounter","counterId","resetCounter","resetAllCounters","addCounter","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c1fc8fa0.chunk.js","sourcesContent":["import {\n  RESET_ALL,\n  INCREASE_COUNTER,\n  ADD_COUNTER,\n  RESET_COUNTER,\n  DELETE_COUNTER,\n} from \"./counterType\";\n\nconst initialState = {\n  counters: [\n    { id: 1, value: 0 },\n    { id: 2, value: 0 },\n    { id: 3, value: 0 },\n    { id: 4, value: 0 },\n  ],\n};\n\nconst counterReducer = (state = initialState, action) => {\n  const counters = [...state.counters];\n  const index = counters.indexOf(action.payload);\n  switch (action.type) {\n    case INCREASE_COUNTER:\n      counters[index] = { ...action.payload };\n      counters[index].value++;\n      return {\n        ...state,\n        counters: counters,\n      };\n    case RESET_COUNTER:\n      counters[index] = { ...action.payload };\n      counters[index].value = 0;\n      return {\n        ...state,\n        counters: counters,\n      };\n    case DELETE_COUNTER:\n      const newDeletedCounters = state.counters.filter(\n        (c) => c.id !== action.payload\n      );\n      return {\n        ...state,\n        counters: newDeletedCounters,\n      };\n    case RESET_ALL:\n      console.log(\"Reset All\");\n      const newResetCounters = state.counters.map((c) => {\n        c.value = 0;\n        return c;\n      });\n      return {\n        ...state,\n        counters: newResetCounters,\n      };\n    case ADD_COUNTER:\n      console.log(\"Reset All\");\n      const ids = state.counters.map((c) => {\n        return c.id;\n      });\n      const newId = rnorm(ids, 100);\n      const newAddedCounters = state.counters.concat({ id: newId, value: 0 }); //.push({ id: newId, value: 0 });\n      return {\n        ...state,\n        counters: newAddedCounters,\n      };\n    default:\n      return state;\n  }\n};\n\nfunction rnorm(arr, size) {\n  //create a function that generates a randorm number between 1 and size excluding values in arr\n  return 0;\n}\nexport default counterReducer;\n","export const INCREASE_COUNTER = \"INCREASE_COUNTER\";\nexport const RESET_COUNTER = \"RESET_COUNTER\";\nexport const RESET_ALL = \"RESET_ALL\";\nexport const DELETE_COUNTER = \"DELETE_COUNTER\";\nexport const ADD_COUNTER = \"ADD_COUNTER\";\n","import { createStore } from \"redux\";\nimport counterReducer from \"./counter/counterReducers\";\n\nconst store = createStore(counterReducer);\n\nexport default store;\n","import React from \"react\";\n\nconst NavBar = ({ totalCounters }) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Navbar{\" \"}\n        <span className=\"badge badge-pill badge-secondary m-2    \">\n          {totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  styles = {\n    fontSize: 50,\n    fontWeight: \"bold\",\n  };\n\n  render() {\n    console.log(\"props\", this.props);\n    return (\n      <div>\n        {this.props.children}\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={() => {\n            this.props.onIncrement(this.props.counter);\n          }}\n          className=\"btn btn-primary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => {\n            this.props.onReset(this.props.counter);\n          }}\n          className=\"btn btn-secondary btn-sm m-1\"\n        >\n          Reset\n        </button>\n        <button\n          onClick={() => {\n            this.props.onDelete(this.props.counter.id);\n          }}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    //console.log(classes);\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n\n/*import React, { Component } from \"react\";\nclass Counter extends Component {\n  state = {\n    count: 1,\n    tags: [],\n    /*imageUrl: \"https://picsum.photos/200\",\n};\n\nstyles = {\n  fontSize: 50,\n  fontWeight: \"bold\",\n};\n\nrenderTags() {\n  if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n\n  return (\n    <ul>\n      {this.state.tags.map((tag) => (\n        <li key={tag}>{tag}</li>\n      ))}\n    </ul>\n  );\n}\n\nrender() {\n  return (\n    <div> \n      {this.state.tags.length === 0 && \"Please create a new tag\"}\n      {this.renderTags()}\n    </div>\n  );\n}\n}\n <button\n          /* onClick={() => {\n            this.props.onChildReset(this.props.counter);\n          }}\n          className=\"btn btn-secondary btn-sm m-1\"\n        >\n          Reset\n        </button>\n        <button\n          /*onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\"\n        ></button>*/\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    const { counters, onDelete, onReset, onIncrement } = this.props;\n    return (\n      <div>\n        <button\n          onClick={() => {\n            this.props.onAdd();\n          }}\n          className=\"btn btn-success btn-sm m-2\"\n        >\n          Add\n        </button>\n        <button\n          onClick={() => {\n            this.props.onResetAll();\n          }}\n          className=\"btn btn-primary btn-sm m-2\"\n        >\n          Reset\n        </button>\n        {counters.map((counter) => (\n          <Counter\n            key={counter.id}\n            onIncrement={onIncrement}\n            onReset={onReset}\n            onDelete={onDelete}\n            counter={counter}\n          >\n            <h4>Counter # {counter.id}</h4>\n          </Counter>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  increaseCounter,\n  deleteCounter,\n  resetCounter,\n  resetAllCounters,\n  addCounter,\n} from \"../redux\";\nimport NavBar from \"./navbar\";\nimport Counters from \"./counters\";\n\nfunction Main(props) {\n  return (\n    <>\n      <NavBar\n        totalCounters={props.counters.filter((c) => c.value > 0).length}\n      />\n      <main>\n        <Counters\n          counters={props.counters}\n          onIncrement={props.increaseCounter}\n          onReset={props.resetCounter}\n          onResetAll={props.resetAllCounters}\n          onDelete={props.deleteCounter}\n          onAdd={props.addCounter}\n        />\n      </main>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    counters: state.counters,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increaseCounter: (counter) => dispatch(increaseCounter(counter)),\n    deleteCounter: (counterId) => dispatch(deleteCounter(counterId)),\n    resetCounter: (counter) => dispatch(resetCounter(counter)),\n    resetAllCounters: () => dispatch(resetAllCounters()),\n    addCounter: () => dispatch(addCounter()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n\n/*\n          onReset={props.handleReset}\n          onChildReset={props.handleChildReset}\n          onDelete={props.handleDelete}\n          onIncrement={props.handleIncrement}\n          onChildAdd={props.handleAdd}\n          counters={props.state.counters}\n          */\n","import {\n  RESET_ALL,\n  INCREASE_COUNTER,\n  ADD_COUNTER,\n  RESET_COUNTER,\n  DELETE_COUNTER,\n} from \"./counterType\";\n\nexport const increaseCounter = (counter) => {\n  return {\n    type: INCREASE_COUNTER,\n    payload: counter,\n  };\n};\n\nexport const deleteCounter = (counterId) => {\n  return {\n    type: DELETE_COUNTER,\n    payload: counterId,\n  };\n};\n\nexport const resetCounter = (counter) => {\n  return {\n    type: RESET_COUNTER,\n    payload: counter,\n  };\n};\n\nexport const addCounter = () => {\n  return {\n    type: ADD_COUNTER,\n  };\n};\n\nexport const resetAllCounters = () => {\n  return {\n    type: RESET_ALL,\n  };\n};\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport Main from \"./components/main\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Main />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}